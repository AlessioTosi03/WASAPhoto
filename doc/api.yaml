openapi: 3.0.3
servers:
  - url: "http://localhost:3000"
info:
  title: WASAPhoto
  description: Fantastic Coffee (decaffeinated), the skeleton project for Web and Software architecture course
  version: 1.0.0

components:
  schemas:
    StatusInfo:
      title: Status Info
      type: object
      properties:
        status:
          type: string
          enum:
            - info
            - warning
            - critical
            - ""
        title: { type: string }
        message: { type: string }
        url: { type: string }
    Picture:
      title: picture
      description: "This object represents a single photo."
      type: object
      properties:
        id:
          description: Unique picture identifier.
          type: integer
          example: 1
          readOnly: true
        likeCounter:
          description: Counter for this picture likes.
          type: integer
          example: 1
          readOnly: true
    Comment:
      title: comment
      description: "This object represents a single comment."
      type: object
      properties:
        id:
          description: Unique comment identifier.
          type: integer
          example: 1
          readOnly: true
        pictureID:
          type: integer
          description: ID of the commented photo.
        userID:
          type: integer
          description: ID of the commenter.
        text:
          description: Comment text.
          type: string
          example: Comment here
      required: [id, pictureID, userID, text]
    Like:
      title: like
      description: "This object represents a single like."
      type: object
      properties:
        pictureID:
          type: integer
        userID:
          type: integer
      required: [pictureID, userID]
    User:
      title: user
      description: "This object represents a single user."
      type: object
      properties:
        id:
          description: Unique user identifier.
          type: integer
          example: 1
          readOnly: true
        name:
          description: name of the user.
          type: string
          example: andre23Z
    FollowRelation:
      title: follow relation
      description: "This object stores follow relations between users."
      type: object
      properties:
        followingID:
          description: "The one who follows"
          type: string
        followedID:
          description: "The one being followed"
          type: string
    BanRelation:
      title: ban relation
      description: "This object represents the ban relations between users."
      type: object
      properties:
        banningID:
          description: The one who bans
          type: string
        bannedID:
          description: the one being banned
          type: string

  responses:
    Unauthorized:
      description: The access token is missing or it's expired
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs

  securitySchemes:
    BearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes

  parameters:
    Authorization:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      description: Bearer token for authentication
    XAppVersion:
      schema:
        type: string
        pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
        minLength: 1
        maxLength: 10
      name: X-App-Version
      in: header
      required: true
      description: App human readable version ("semantic version" format)
      allowEmptyValue: false
    XAppBuild:
      schema: { type: integer }
      name: X-App-Build
      in: header
      required: true
      description: App build number
      allowEmptyValue: false
    XAppLanguage:
      schema:
        type: string
        pattern: '^[a-z]{2}([-_][A-Z]{2})?$'
        minLength: 2
        maxLength: 5
      name: X-App-Language
      in: header
      required: true
      description: App language in ISO 639-1 format
      allowEmptyValue: false
    XAppPlatform:
      schema:
        type: string
        enum: [ios, android]
      name: X-App-Platform
      in: header
      required: true
      description: App operating system / platform
      allowEmptyValue: false
    pictureID:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: pictureId
      in: path
      required: true
      description: Picture identifier.
      allowEmptyValue: false
    UserID:
      schema:
        type: integer
        example: 42
        readOnly: true
      name: userId
      in: path
      required: true
      description: Unique identifier for a user.
      allowEmptyValue: false
    CommentID:
      schema:
        type: integer
        example: 27
        readOnly: true
      name: commentId
      in: path
      required: true
      description: Unique identifier for a comment.
      allowEmptyValue: false
      
paths:
  /status:
    parameters:
      - $ref: "#/components/parameters/XAppBuild"
      - $ref: "#/components/parameters/XAppVersion"
      - $ref: "#/components/parameters/XAppLanguage"
      - $ref: "#/components/parameters/XAppPlatform"
    get:
      tags: ["General"]
      operationId: getStatusMessage
      summary: Get status message for the user about issues / updates
      description: |-
        The response contains a status message meant for the user. It might
        contains information about current technical issues, update messages
        or general information.
      responses:
        "200":
          description: Status message available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusInfo"
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /:
    get:
      tags: ["Group 1"]
      operationId: index
      summary: Get an index
      description: |-
        This is an example of an index API description
      responses:
        "200":
          description: Successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /context:
    parameters:
      - $ref: "#/components/parameters/XAppBuild"
      - $ref: "#/components/parameters/XAppVersion"
      - $ref: "#/components/parameters/XAppLanguage"
      - $ref: "#/components/parameters/XAppPlatform"
    post:
      tags: ["Group 1"]
      operationId: getContext
      summary: Another API example
      description: |-
        Example description 2
      responses:
        "200":
          description: Request ok
          headers:
            X-Access-Token:
              description: Access token for authenticated requests
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /user/{userID}/:
    parameters:
      - $ref: "#/components/parameters/Authorization"
    post:
      tags: ["Manage profile"]
      operationId: followUser
      summary: Follow another user
      description: |-
        Example of a parameter in URL
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:  # Minimal data, just the ID of the user being followed
                  type: string
                  description: ID of the user to follow
                  example: "targetUserID123"
              required:
                - UserID
      responses:
        "200":
          description: User followed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
    put:
      tags: ["Manage profile"]
      operationId: setMyUserName
      summary: Modify my Username
      description: |-
        Example of a parameter in URL
      security:
        - BearerAuth: []
      requestBody:
        description: New username to be set
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "newUsername123"
                  minLength: 3
                  maxLength: 16
              required:
                - username
      responses:
        "200":
          description: Username updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
      
  /user/{userID}/pictures/:
    parameters:
      - $ref: "#/components/parameters/Authorization"
    post:
      tags: ["Manage profile"]
      operationId: uploadPhoto
      summary: Upload a new photo
      description: |-
        Example of a parameter in URL
      security:
        - BearerAuth: []
      requestBody:
        content:
          image/png:
            schema: { $ref: "#/components/schemas/Picture"}
      responses:
        "200":
          description: Student picture found
          content:
            image/png:
              schema:
                type: string
                format: binary
              example: Picture binary file
        "404":
          description: Student picture not found
        "500": { $ref: "#/components/responses/InternalServerError" }
  /user/{userID}/pictures/{pictureID}:
    parameters:
      - $ref: "#/components/parameters/XAppBuild"
      - $ref: "#/components/parameters/XAppVersion"
      - $ref: "#/components/parameters/XAppLanguage"
      - $ref: "#/components/parameters/XAppPlatform"
      - $ref: "#/components/parameters/pictureID"
      - $ref: "#/components/parameters/Authorization"
    delete:
      tags: ["Manage profile"]
      operationId: deletePhoto
      summary: Photo DELETE operation
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Photo deleted successfully
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
                  message:
                    type: string
                    example: "Login Successful"